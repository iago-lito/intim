*intim.txt*                       Version 1.0            Last change: 2020-07-22

                                    Intim

                 Interactively Interface Vim with Interpreters

==============================================================================
CONTENT                                                          *intim-content*

     1. Introduction ......................... |intim-introduction|
     2. Starting Intim ....................... |intim-starting|
     3. Configuring .......................... |intim-configure|
     4. Tweaking startup ..................... |intim-startup|
     5. Passing commands ..................... |intim-passing|
     6. Language specific features ........... |intim-language-specific|
     7. Getting help ......................... |intim-help|
     8. Coloring ............................. |intim-colors|
     9. Hotkeys .............................. |intim-hotkeys|
          headed ............................. |intim-headed-hotkeys|
          prefixed ........................... |intim-prefixed-hotkeys|
          latex .............................. |intim-latex-hotkeys|
          constant ........................... |intim-constant-hotkeys|
          generic ............................ |intim-generic-hotkeys|
          default ............................ |intim-default-hotkeys|
    10. Debug mode ........................... |intim-debug-mode|
    11. LaTeX and non-interpreted languages .. |intim-compiled|
    12. License .............................. |intim-license|
    13. Bugs ................................. |intim-bugs|
    14. Contributing ......................... |intim-contribute|
    15. Credits .............................. |intim-credits|

==============================================================================
1. Introduction                                             *intim-introduction*

This plugin makes you open, from within Vim, an interactive interpreter in
another terminal. This interpreter may be a shell, `python`, `R` or anything you
want. You feed input to this terminal via predefined or custom Vim mappings:
like sending commands, interrupting, restarting, analyzing variables etc.

This plugin is mostly inspired from vim-R plugin
(https://github.com/jcfaria/Vim-R-plugin), a great plugin dedicated do
this with R. The intent is to extend the idea to any interpreter and to offer
more configuration options.

All mappings and options described in this document are only default mappings
and options or example mappings and options. They will not be set by Intim if
you already had them mapped to something else. Do not hesitate to change them
so it is the most comfortable for you.

Of course, this is an open project licenced under GNU3. Feel free to get into
the code, share, provide feedback, fork or contribute ;)

    Enjoy!

==============================================================================
2. Starting Intim                                               *intim-starting*
                                                                *intim-launch*

Once your script file is opened in Vim, use either >

    nmap <F10> <Plug>IntimLaunchSession
    :call IntimLaunchSession()

to launch a new `tmux` session and invoke your interpreter inside.

                                                                   *intim-end*
To terminate the session, use either >

    nmap <F2> <Plug>IntimEndSession
    :call IntimEndSession()

If you close Vim without terminating the session, it will just stay open and
you may communicate with it again the next time you start Vim.

                                                              *intim-terminal*

Choose the terminal you would like to see your interpreter running within with >

    let g:intim_terminal = "gnome-terminal"

Note: If you wish to explicitly state the terminal invocation command, you may
use the <tmux> placeholder to define position of the `tmux` launch command.
In a nutshell, <tmux> represents the first command sent to your terminal. The
one that serves opening the `tmux` session that Intim relies on.
For instance, `"gnome-terminal"` is automatically reinterpreted as >

    let g:intim_terminal = "gnome-terminal -- <tmux>"

and `"xterm"` as: >

    let g:intim_terminal = "xterm"
    let g:intim_terminal = "eval \"nohup xterm -e '<tmux>' &\" > /dev/null 2>&1"

For other terminal emulators, you may have to build the command yourself, or
ask for help on Intim repo.
Typically, `myfavoriteterminal -e '<tmux>'` or `myfvterminal -c '<tmux>'` will do.

                                                                  *intim-tmux*

For those familiar with `tmux`, the invocation command hidden behind <tmux> is
defined by the default variable >

    let g:intim_tmux = "tmux -2 new -s <sessionName>"

So you may redefine it any way you prefer. The <sessionName> placeholder is
replaced by `"IntimSession"` by default. This will be the name of your `tmux`
session, unless you set *g:intim_sessionName* to anything else.

==============================================================================
3. Configuring Intim                                         *intim-configure*

Intim can be configured in your `.vimrc` via three channels:

    First: define traditional mappings that suits your need best, like >

        nmap ,oi <Plug>IntimLaunchSession
<
        if you don't like the default <F10>.

    Second: set global variables, like >

        let g:intim_terminal = "xterm"
<
        if you don't like default `gnome-terminal` or cannot use it.

    Third: use Intim configuration functions like >

        call Intim_invokeCommand('python', 'ipython3')
<
        (see |intim-invoke| or search this file for `call` to read other examples)

        While working with this language channel, options can be read with the
        following `IntimGet` functions, like: >

        :echo IntimGetInvokeCommand()
<
        Note: For now (but any contribution is welcome), Intim function are
        only guaranteed to be defined after vim has started. So, in order to
        avoid `E117 undefined function` errors on vim start, you are encouraged
        to wrap these calls in vim autocommands, like: >

        augroup IntimGroup
            autocmd!
            autocmd BufEnter *.py call Intim_invokeCommand('python', 'ipython3')
        augroup end

Note: Intim should work out of the box. However, it is also much configurable.
If it eventually turns out that you have many configuration options to define,
our recommandation to keep things tidy is then to define a dedicated function
in your `.vimrc` to be ran as an autocmd. For instance: >

    function! IntimForPython()
        " Prepare Intim for a python file

        " global variables
        let g:intim_terminal = "gnome-terminal"

        " mappings
        nmap <buffer> ,oi <Plug>IntimLaunchSession

        " Intim functions
        call Intim_invokeCommand('python', 'ipython3')
        call Intim_hotkeys('pyhon', 'ii', '* += 1')

        call IntimSetLanguage('python')

    endfunction

    " call the function for setup once for all in python files:
    autocmd VimEnter,BufEnter *.py,*.sage call IntimForPython()

so it is easy to tweak it aftewards and shape it just like you prefer.

==============================================================================
4. Tweaking Intim Startup                                      *intim-startup*

                                                           *intim-postlaunch*

Here is a hook for you: these commands will be executed by your system right
after `tmux` session has been launched, and before invokation of your
interpreter.
Use it, for example, to navigate to your favorite scripting directory, to
temporarily edit your `$PATH`, or to tile the newly opened terminal so you get
it comfy on your screen. >

    call Intim_postLaunchCommands('default', ['my default custom command'])
    call Intim_postLaunchCommands('python', ['my custom command for python'])
    call Intim_postLaunchCommands('R', ['my custom command for R'])
<
                                                                *intim-invoke*

Choose the interpreter you would like to invoke once `tmux` session has been
launched: >

    call Intim_invokeCommand('default', '')
    call Intim_invokeCommand('python', 'ipython')
    call Intim_invokeCommand('R', 'R --no-save --no-restore')
    call Intim_invokeCommand('bash', 'bash')
    call Intim_invokeCommand('LaTeX', '')
<

                                                              *intim-language*

If it seems unclear to Intim which language you intend to use, use the
dedicated function >

    call IntimSetLanguage('myLanguage')

in your autocmd procedures, so that it'll be aware from now on. When Intim
doesn't know, it falls back to option stored as `default`.

                                                             *intim-preinvoke*

Here is a hook for you: these commands will be sent to the tmuxed terminal
just before your interpreter invocation. In other words, it is pretty much the
same as intim-postlaunch but they will be sent to `tmux` instead of being
sent directly to your system: >

    call Intim_preInvokeCommands('default', ['cd ~'])
<
                                                            *intim-postinvoke*

Here is another hook: this command will we executed right after the
interpreter has been invoked. In other words, it will be the first command to
be interpreted. Use it to load your favorite package, or to print a hello
test: >

    call Intim_postInvokeCommands('default', [''])
    call Intim_postInvokeCommands('python', ['import numpy as np', 'import os'])
    call Intim_postInvokeCommands('R', ['setwd("~/myR/")',
                                      \ 'print("Hello!")'])
<

                                                                  *intim-exit*

Here is a last option defining how to make the interpreter leave: >

    call Intim_exitCommands('default', '')
    call Intim_exitCommands('python', 'exit()')
    call Intim_exitCommands('R', "quit(save='no')")
    call Intim_exitCommands('javascript', "process.exit()")
<
                                                        *intim-exit-shortcuts*

And here are direct shortcuts to invoke, exit or restart your interpreter: >

    nmap ,ii <Plug>IntimInvokeInterpreter
    nmap ,ex <Plug>IntimExitInterpreter
    nmap ,rs <Plug>IntimRestartInterpreter

==============================================================================
5. Passing commands                                              *intim-passing*

The main feature of Intim is passing command to the tmuxed terminal session.
Use the default mappings: >

    nmap <space>  <Plug>IntimSendLine
    nmap ,<space> <Plug>IntimSendWord
    vmap c<space> <Plug>IntimSendSelection
    vmap <space>  <Plug>IntimSendChunk

to send the current script line, word or visually selected area to your
interpreter.

When a "chunk" is sent (basically, several lines at once), Intim copies it to
a temporary file then sources this file from the interpreter. Location of this
file is set by option *g:intim_tempChunks* which defaults to Intim package
folder.

Once anything sent, Intim tries navigating to the next line of script in your
file. You may find it comfy or annoying.. or it may depends on the situation.
To send commands without navigating next, use >

    nmap c<space> <Plug>IntimStaticSendLine
    vmap ,<space> <Plug>IntimStaticSendChunk
    vmap ,<space> <Plug>IntimStaticSendSelection
<
                                                              *intim-send-all*

Sometimes you feel like sending every line you have written to the
interpreter, well you may >

    nmap a<space><space> <Plug>IntimSendAll
<
                                                             *intim-send-file*

Or you can send your whole file as a chunk, as currently written on the disk >

    nmap a<space><space> <Plug>IntimSendFile
<
Be aware that no unsaved change will be sent this way, unless you remap it to
something like >

    nmap a<space><space> :w<cr><Plug>IntimSendFile

or anything you prefer.

                                                             *intim-send-enter*

If you just need to send an empty line, or an enter/return signal to your
interpreter, use >

    nmap <cr> <Plug>IntimEnter
<
                                                             *intim-interrupt*

Sometimes, commands evaluate too long for you to wait. You may then interrupt
your interpreter using >

    nmap <c-c> <Plug>IntimSendInterrupt

To leave you interpreter the End-Of-File way, use >

    nmap <c-e> <Plug>IntimSendEOF

Should you like to create your own sending mappings. Intims provides vim
functions for that, feel free to use >

    call IntimSend('my command')
    call IntimSendJust('my text without pressing enter')
    call IntimSendEnter()
    call IntimSendSpace()
    call IntimSendInterrupt()
    call IntimSendEOF()
    call IntimSendTmux('send raw tmux input')

in any of your custom recipes.
                                                            *intim-autoindent*
                                                               *intim-ipython*
                                                                  *intim-sage*

Note: Special case for `ipython` and `sage` users:

    Because of auto-indentation feature in these interpreters,
    `<Plug>IntimSendSelection` etc. use a different sending procedure,
    controlled by the option: >

        call Intim_sendSelection('sage', 'MagicCpaste')

<    This option should have been set automagically for you if Intim detects
    `ipython` or `sage` in your intim-invoke command.

    However, you may have to set it manually if your case is special.

==============================================================================
6. Language-specific features                        *intim-language-specific*

These utilities depend on the language you are working with.

                                                                  *intim-loop*

In `python` or `R` files, you may enter / initiate a loop with >

    nmap ,il <Plug>IntimInitiatePythonLoop
    nmap ,il <Plug>IntimInitiateRLoop

In this situation for instance: >

    for i in range(10):
        # ^ cursor here
        # rest of the loop..

This works by launching the loop and immediately stopping it.
Sending `for i in range(10): break` is enough.
After this action, the variable `i` shall be initialized.

==============================================================================
7. Getting help                                                   *intim-help*

Intim tries to fetch help files from your interpreter, and open them in a
unnammed buffer. Put your Vim cursor on the symbol you need help about, or
visually select the area you need help about, then use >

  nmap <F1> <Plug>GetHelpWord
  vmap <F1> <Plug>GetHelpSelection

to get help. For now, this is only supported for `R` and `python` languages.
Feel free to send presents to random developers so they get down to Intim repo
and provide support for your favorite interpreter.

Help information is temporarily buffered into an intim file: >

    let g:intim_tempHelp = '~/.vim/intim/tmp/help'

==============================================================================
8. Coloring                                                       *intim-colors*

Intim tries analysing your current interpreter session to dig out all
declared currently declared symbols and their types. It will then use this
information to paint your script in various colors depending on which you like
most. Use >

    nmap ,uc <Plug>IntimUpdateColor

to update your file coloring. This is only supported for `R` and `python`
languages yet. Feel free to send presents to random developers so they get
down to Intim repo and provide support for your favorite interpreter.

Note: In order not to make vim coloring procedure sluggish, Intim parses your
scripts so that only the symbols used in your files need to be colored.
Syntactic information about it can be found in Intim's temp files
*g:intim_tempSyntax* located in the plugin folder by default.

Should you like appending custom syntax coloring rules after this automatic
coloring, then you can write your own post-coloring syntax function, and tell
Intim you'd like to run it after each refresh: >

    function! MyPythonFurtherSyntax()
        " color parentheses etc.
        syntax match Special "[()\[\]{}\-\*+\/]"
    endfunction

    call Intim_syntaxFunction('python', 'MyPythonFurtherSyntax')

==============================================================================
9. Hotkeys                                                       *intim-hotkeys*

While you are developping your script, you often need to ask small things to
your interpreter, such as the `len()` of one variable in `python` or the
`summary()` of a `data.frame` in `R`. However, you don't really need to add
those commands to your file, and it may be tedious to write them again and
again.
Instead, you may use Intim hotkeys to send dynamic quick, repetitive
requests about your symbols. By default in `python`, for instance, with your
cursor positionned here ----|

    my_list = [1, 5, 8, 9]
    my_list.append(12)
    print(my_list)
|----------^

typing >

    ,ln

will send

    >>> len(my_list)
    5

to the `python` interpreter, so you don't even need to leave Vim. As another
example from your `R` script, with your cursor here ----|

    set.seed(12)
    n <- 15
    data <- data.frame(type=sample(letters[1:5], n, replace=TRUE),
                       size=runif(n, 0., 15.))
    write.table(data, 'randomData.csv')
|-----------------^

typing >

    ,hd

will send

    > head(data)
      type     size
    1    a 6.590015
    2    e 6.864107
    3    e 8.110613
    4    b 9.985197
    5    a 1.690484
    6    a 3.275508

, typing >

    ,sm

will send

    > summary(data)
     type       size
     a:6   Min.   : 1.468
     b:5   1st Qu.: 3.271
     d:1   Median : 6.591
     e:3   Mean   : 6.318
           3rd Qu.: 9.048
           Max.   :11.818

and typing >

    ,pl

will send

    > plot(data)

to the `R` interpreter, and produce a nice graph.
                                                                  *intim-leader*

There are a bunch of hotkeys provided by default with Intim, and you can
define your own, of course. Hotkeys are built with a leader (here `,`)
followed by a shortcut (here `pl`). You may define the leader you like best
for various languages with the following functions: >

    call Intim_hotkeys_nleader('python', ',') " for normal mode sending
    call Intim_hotkeys_vleader('python', ',') " for visual mode sending
    call Intim_hotkeys_edit_vleader('LaTeX', ',') " for visual mode editing
    call Intim_hotkeys_edit_ileader('R', ';')     " for insert mode editing

Hotkeys fall into various categories:


1) Headed hotkeys: - - - - - - - - - - - - - - - - - - *Intim_headedExpression*
                                                       *intim-headed-hotkeys*

Useful for sending expression of the form `head(inside)`. Just move your
cursor to the `inside` part in your script and type your hotkey code right
after your leader key. See the three above example for instance.

    Use *Intim_headedExpression()* to define your own headed hotkey mappings.
For instance, once you have called: >

    call Intim_headedExpression('R', 'ac', 'as.character')
    call Intim_headedExpression('R', 'mx', 'max')

, you may type in normal mode >

    ,ac
    ,mx

in `R` to successively to get the `as.character` view of the variable your
were currently pointing to, then its maximum value.

                                                        *intim-edit-bonuses*
                                                                   *bonuses*

    Note: For each headed expression you define this way, Intim also provides
a few edition bonuses in normal, visual and insert mode. For instance, if your
keep the defaults *Intim_nleader* , *Intim_vleader* and *Intim_ileader*
settings, typing in normal mode >

    ;ac

will wrap the `word` under cursor into a `as.character(word)` expression;
typing in visual mode >

    ;ac

will wrap your selected `area` into a `as.character(area)` expression;
and typing in insert mode >

    ,ac

inserts a full, ready-to-fill `as.character()` expression to your script.
Try it out!


2) Prefixed hotkeys: - - - - - - - - - - - - - - - - *Intim_prefixedExpression*
                                                     *intim-prefixed-hotkeys*

    Useful for sending expression of the form `prefix after` . Just move your
cursor to the `after` part in your script and type your hotkey code right
after your leading key.

    Use Intim_prefixedExpression() to define your own prefixed hotkey
mappings. For instance, once you have called: >

    call Intim_prefixedExpression('python', 'sf', 'self = ')
    call Intim_prefixedExpression('python', 'cl', 'cls = ')

, you may type in normal mode >

    ,sf

while pointing to your `instance` so that the command `self = instance` is sent
to the interpreter. This may be useful for swift debugging activity.

    Note: Intim's edit bonuses are also defined on each call to
Intim_prefixedExpression() , try `;sf` in normal and visual mode, or `,sf` in
insert mode.


3) LaTeX-style hotkeys: - - - - - - - - - - - - - - - - *Intim_latexExpression*
                                                        *intim-latex-hotkeys*

These hotkeys are only useful as edit bonuses while writing LaTeX code.
They transform any `text` into an expression like `\head{text}`. Use
these calls to define your own heads and hotkeys: >

    call Intim_latexExpression('LaTeX', 'pr', 'pageref')
    call Intim_latexExpression('LaTeX', 'ep', 'emph')

then playaround with `,pr`, in normal, visual or insert modes. Don't forget to
set the leading key you like best with Intim_ileader function, etc.


4) Constant hotkeys: - - - - - - - - - - - - - - - - *Intim_constantExpression*
                                                     *intim-constant-hotkeys*

    Useful for sending any fixed command to the interpreter.. or for enjoying
associated fixed edit bonuses in non-intepreted languages like LaTeX. For
instance, once you have called >

    call Intim_constantExpression('R', 'go', 'graphics.off()')
    call Intim_constantExpression('LaTeX', 'ea', '\expandafter')
    call Intim_constantExpression('Rust', 'cr', 'cargo run')

you'll be able to close every `R` graphs typing only `,go` in normal mode, to
write `\expandafter` in LaTeX typing only `,ea` in insert mode, or
compiling/running your whole `Rust` code typing only `,cr` in normal mode. Try
them out!


5) Generic hotkeys: - - - - - - - - - - - - - - - - - - - - - - *Intim_hotkeys*
                                                        *intim-generic-hotkeys*

    This is the most general type of hotkeys, with expressions defined as you
wish with one placeholder written as a star `*`. For instance,

- Intim_headedExpression are defined as `head(*)`
- Intim_prefixedExpression are defined as `prefix *`
- Intim_latexExpression are defined as `\head{*}`
- Intim_constantExpression are defined as `constant`

    You may define you own of course. For instance, once you have called >

    call Intim_hotkeys('R', 'ii', '* <- * + 1')
    call Intim_hotkeys('python', 'ii', '* += 1')

you'll be able to increment any `counter` in `R` or `python` by navigating to
it, then type `,ii` in normal mode.

Note: No edit bonuses are automatically defined for generic hotkeys
expression like these. If you need anything like this, you will probably
make a good use of the `Ultisnips` package, found at
https://github.com/SirVer/ultisnips.

- Default hotkeys - - - - - - - - - - - - - - - - - - - *intim-default-hotkeys*

    Here is the exhaustive list of every default hotkeys defined by Intim.

Note: You can simply override these defaults with anything you like or prefer.
Furthermore, if you had anything else mapped to these before you installed
Intim, Intim will not override you personal, existing mappings, and will
define nothing instead of one default :)

    |intim-headed-hotkeys|

    for `R`:
            al    as.logical
            ac    as.character
            ai    as.integer
            an    as.numeric
            cl    class
            cn    colnames
            dm    dim
            hd    head
            ia    is.array
            id    is.data.frame
            il    is.list
            im    is.matrix
            in    is.numeric
            is    is.sorted
            iv    is.vector
            lg    length
            lv    levels
            me    mean
            mn    min
            mx    max
            nc    ncol
            nh    nchar
            nm    names
            nr    nrow
            pl    plot
            pr    print
            rg    range
            rn    rownames
            sm    summary
            sd    std
            sz    size
            tb    table
            tl    tail
            tr    t
            un    unique

    for `python`:

            dr    dir
            id    id
            ln    len
            mn    min
            mx    max
            pr    prit
            ty    type

    |intim-prefixed-hotkeys|

    for `python`:

            sf    self =
            cl    cls =

    |intim-latex-hotkeys|

    for `LateX`:

            bb   subsubsection
            bf   textbf
            ch   chapter
            cp   caption
            ct   cite
            ep   emph
            in   includegraphic
            it   textit
            lb   label
            mb   mbox
            nc   newcommand
            pr   pageref
            rf   ref
            sb   subsection
            sc   textsc
            se   section
            sf   textsf
            tb   textbf
            te   emph
            ti   textit
            tt   texttt
            tx   text
            up   usepackage

    |intim-constant-hotkeys|

    for `R`:
            go   graphics.off()

    for `LaTeX`:

            ex   \expandafter
            hf   \hfill
            hr   \hrule
            ne   \noexpand
            ni   \noindent
            nl   \null
            vf   \vfill
            vr   \vrule

    for `Rust`:

            cb   cargo build
            cr   cargo run
            ct   cargo test

==============================================================================
10. Debug mode                                              *intim-debug-mode*

Intim will make an attempt to understand when it's debugging time, and alter
it's behaviour so that user will not have to alter theirs.

For now, debug mode is automagically detected in `python`-related languages and
`gdb`-debuggable languages. You may verify it with.. >

    :call IntimIsDebugMode()

.. which should output 1 when you are debugging. Magic actually operates with
a parsing of your current tmux prompt. Should your interpreter have a
non-standard prompt, like not `(Pdb)` or `(gdb)`, then debug mode will not be
detected :\ Please file an issue to Intim repo then.

There is not much to worry about debug mode. With python, every piece of script
you'll send will be automatically prefixed by `!` so as to typically avoid
clashes between your variables names and `pdb` commands like `n`, `s`, `h`, etc.

A bunch of dedicated mappings are also enabled in python debug mode, like: >

    nnoremap ,A :call IntimDebugCommand('args')<cr>
    nnoremap ,C :call IntimDebugCommand('continue')<cr>
    nnoremap ,D :call IntimDebugCommand('down')<cr>
    nnoremap ,H :call IntimDebugCommand('help')<cr>
    nnoremap ,L :call IntimDebugCommand('list')<cr>
    nnoremap ,N :call IntimDebugCommand('next')<cr>
    nnoremap ,Q :call IntimDebugCommand('quit')<cr>
    nnoremap ,R :call IntimDebugCommand('return')<cr>
    nnoremap ,S :call IntimDebugCommand('step')<cr>
    nnoremap ,U :call IntimDebugCommand('up')<cr>
    nnoremap ,W :call IntimDebugCommand('where')<cr>

.. feel free to define more :)

==============================================================================
11. LaTeX and non-interpreted languages.                           *intim-latex*
                                                                *intim-compiled*

Although it is not an actually interpreted language, you may benefit from
Intim even while using `Rust` or `LaTeX`. Because it often is useful to send
compilation commands on-the-fly or to navigate to produced documents.. even
edit bonuses and |Intim_latexExpression| may be useful. Use >

    nmap ,lc <Plug>IntimTexCompileFast

to send your document's compilation commands. Use >

    nmap ,Lc <Plug>IntimTexCompileFull

to compile twice with the bibliography. Use >

    nmap ,mc <Plug>IntimTexClean

to clean up every LaTeX intermediate file. And use >

    nmap ,to <Plug>IntimOpenPdf

to get your document opened in the pdf viewer you defined in >

    let g:intim_openPdf_command = "evince * &"

were `*` stands as a placeholder for your document's filename.

Or do the same with the function >

    call IntimCompileTex('fast')
    call IntimCompileTex('lncs', 'filename_without_extension')

Available options are:

    'full'  pdflatex && biber && pdflatex
    'lncs'  pdflatex && bibtex && pdflatex && pdflatex
    'twice' pdflatex && pdflatex
    'fast'  pdflatex
    'clean' remove files with extension
                .out
                .aux
                .blg
                .log
                -blx.bib
                .toc
                .xml
                .bcf
                .bbl
                .nav
                .snm
                .run.xml

Note: as the time of writing, these options are not much customizable. Your
may create your own from scratch by making a good use of
|Intim_constantExpression| and |IntimSend| functions. Do not hesitate visiting
the repo and ask for features if you need more.

You may want something special to happen depending on the success of TeX
compilation. For this, use the following two options. By default, intim just
prints out a colored message. >

    let g:intim_texSuccessCommand = "echo '\\033[32m \ndone.\n\\033[0m'"
    let g:intim_texFailureCommand = "echo '\\033[31m \nfailed.\n\\033[0m'"

==============================================================================
12. License                                                      *intim-license*

    Intim is released under the GPL3.
    See https://www.gnu.org/licenses/gpl-3.0.html

==============================================================================
13. Bugs                                                            *intim-bugs*

    If you experience any bugs or have feature requests, please open an issue
on Intim repo:

    https://github.com/iago-lito/intim/issues

==============================================================================
14. Contributing                                              *intim-contribute*
                                                                          *repo*

    Fork the source repository and send a pull request if you have any script
improvements. I'll be happy to work with you :)

Source repository: https://github.com/iago-lito/intim

==============================================================================
15. Credits                                                      *intim-credits*

Authors: ~

        Iago-lito   http://github.com/iago-lito

Special thanks to: ~

        José Cláudio Faria for this inspiring plugin:
            https://github.com/jcfaria/Vim-R-plugin

